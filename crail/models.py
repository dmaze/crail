'''Database object models.'''
from flask.ext.login import UserMixin
from flask.ext.migrate import Migrate
from flask.ext.sqlalchemy import SQLAlchemy

db = SQLAlchemy()

# Get better autogenerated names for things
db.metadata.naming_convention = {
    "ix": 'ix_%(column_0_label)s',
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}

migrate = Migrate(db=db)


class Good(db.Model):
    id = db.Column(db.Integer, db.Sequence('good_id_seq'), primary_key=True)
    name = db.Column(db.String(32), unique=True)

    def __str__(self):
        return self.name

    def __repr__(self):
        return 'Good(id={0.id!r}, name={0.name!r})'.format(self)


city_produces = db.Table(
    'city_produces', db.metadata,
    db.Column('good_id', db.Integer, db.ForeignKey('good.id'), nullable=False),
    db.Column('city_id', db.Integer, db.ForeignKey('city.id'), nullable=False)
)


class City(db.Model):
    id = db.Column(db.Integer, db.Sequence('city_id_seq'), primary_key=True)
    name = db.Column(db.String(64), nullable=False)
    produces = db.relationship('Good', secondary=city_produces,
                               backref='producers')
    world_id = db.Column(db.Integer, db.ForeignKey('world.id'), nullable=False)
    world = db.relationship('World', backref=db.backref('cities'))

    def __str__(self):
        return self.name

    def __repr__(self):
        return ('City(id={0.id!r}, name={0.name!r}, produces={0.produces!r}, '
                'world={0.world!r})'.format(self))


class Contract(db.Model):
    id = db.Column(db.Integer, db.Sequence('contract_id_seq'),
                   primary_key=True)
    good_id = db.Column(db.Integer, db.ForeignKey('good.id'), nullable=False)
    good = db.relationship('Good', backref=db.backref('contracts'))
    city_id = db.Column(db.Integer, db.ForeignKey('city.id'), nullable=False)
    city = db.relationship('City', backref=db.backref('contracts'))
    amount = db.Column(db.Integer, nullable=False)

    def __str__(self):
        return '{0.good!s} to {0.city!s} for {0.amount}'.format(self)

    def __repr__(self):
        return ('Contract(id={0.id!r}, good={0.good!r}, city={0.city!r}, '
                'amount={0.amount!r})'.format(self))


card_contract = db.Table(
    'card_contract', db.metadata,
    db.Column('card_id', db.Integer, db.ForeignKey('card.id'), nullable=False),
    db.Column('contract_id', db.Integer, db.ForeignKey('contract.id'),
              nullable=False)
)


class Card(db.Model):
    id = db.Column(db.Integer, db.Sequence('card_id_seq'), primary_key=True)
    #: Printed number on the card.
    #: If :const:`None` this is an auto-generated card.
    number = db.Column(db.Integer)
    event = db.Column(db.Text)
    contracts = db.relationship('Contract', secondary=card_contract,
                                backref='cards')
    world_id = db.Column(db.Integer, db.ForeignKey('world.id'), nullable=False)
    world = db.relationship('World', backref=db.backref('cards'))

    def __str__(self):
        text = 'Card {0.number!s}: '.format(self)
        if self.event:
            text += self.event
            if self.contracts:
                text += '; '
        if self.contracts:
            text += '; '.join(str(c) for c in self.contracts)
        if not (self.event or self.contracts):
            text += 'Blank'
        return text

    def __repr__(self):
        return ('Card(id={0.id!r}, event={0.event!r}, '
                'contracts={0.contracts!r}, world={0.world!r}'.format(self))


class World(db.Model):
    id = db.Column(db.Integer, db.Sequence('world_id_seq'), primary_key=True)
    name = db.Column(db.String(64), unique=True)

    def __str__(self):
        return self.name

    def __repr__(self):
        return 'World(id={0.id!r}, name={0.name!r})'.format(self)


player_card = db.Table(
    'player_card', db.metadata,
    db.Column('player_id', db.Integer, db.ForeignKey('player.id'),
              nullable=False),
    db.Column('card_id', db.Integer, db.ForeignKey('card.id'), nullable=False)
)


class Player(db.Model, UserMixin):
    id = db.Column(db.Integer, db.Sequence('player_id_seq'), primary_key=True)
    name = db.Column(db.Text, nullable=False)
    money = db.Column(db.Integer, nullable=False)
    cards = db.relationship('Card', secondary=player_card,
                            backref=db.backref('players'))
    game_id = db.Column(db.Integer, db.ForeignKey('game.id'))
    game = db.relationship('Game', backref=db.backref('players'))

    def __str__(self):
        return self.name

    def __repr__(self):
        return ('Player(id={0.id!r}, name={0.name!r}, money={0.money!r}, '
                'cards={0.cards!r}, game={0.game!r})'.format(self))


class PlayedCard(db.Model):
    id = db.Column(db.Integer, db.Sequence('played_card_seq'), primary_key=True)
    game_id = db.Column(db.Integer, db.ForeignKey('game.id'), nullable=False)
    game = db.relationship('Game', backref=db.backref('played_cards'))
    card_id = db.Column(db.Integer, db.ForeignKey('card.id'), nullable=False)
    card = db.relationship('Card', backref=db.backref('played_cards'))

    def __repr__(self):
        return ('PlayedCard(id={0.id!r}, game={0.game!r}, card={0.card!r})'
                .format(self))


class Game(db.Model):
    id = db.Column(db.Integer, db.Sequence('game_id_seq'), primary_key=True)
    world_id = db.Column(db.Integer, db.ForeignKey('world.id'), nullable=False)
    world = db.relationship('World')

    def __str__(self):
        return 'Game {0.id} ({0.world.name})'.format(self)

    def __repr__(self):
        return 'Game(id={0.id!r}, world={0.world!r})'.format(self)
